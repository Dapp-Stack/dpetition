{
  "contractName": "Initializable",
  "abi": [],
  "source": "pragma solidity ^0.5.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n    /**\n    * @dev Indicates that the contract has been initialized.\n    */\n    bool private initialized;\n\n    /**\n    * @dev Indicates that the contract is in the process of being initialized.\n    */\n    bool private initializing;\n\n    /**\n    * @dev Modifier to use in the initializer function of a contract.\n    */\n    modifier initializer() {\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n        bool wasInitializing = initializing;\n        initializing = true;\n        initialized = true;\n\n        _;\n\n        initializing = wasInitializing;\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        uint256 cs;\n        assembly { cs := extcodesize(address) }\n        return cs == 0;\n    }\n\n    // Reserved storage space to allow for layout changes in the future.\n    uint256[50] private ______gap;\n}",
  "sourcePath": "/Users/anthony/code/DappStack/dpetition/contracts/src/Initializable.sol",
  "bytecode": "6080604052348015600f57600080fd5b50603580601d6000396000f3fe6080604052600080fdfea165627a7a723058203a959a003d0d7ae7b9a29ae225316aa41cc47e4f4ab85240aea083927f6a12110029",
  "sourceMap": "648:1352:14:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;648:1352:14;;;;;;;",
  "deployedBytecode": "6080604052600080fdfea165627a7a723058203a959a003d0d7ae7b9a29ae225316aa41cc47e4f4ab85240aea083927f6a12110029",
  "deployedSourceMap": "648:1352:14:-;;;;;"
}