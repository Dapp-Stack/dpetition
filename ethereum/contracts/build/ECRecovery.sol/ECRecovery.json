{
  "contractName": "ECRecovery",
  "abi": [],
  "source": "pragma solidity ^0.5.0;\n\n\n/**\n * @title Elliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\n\nlibrary ECRecovery {\n\n    /**\n    * @dev Recover signer address from a message by using their signature\n    * @param _hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n    * @param _sig bytes signature, the signature is generated using web3.eth.sign()\n    */\n    function recover(bytes32 _hash, bytes memory _sig)\n        internal\n        pure\n        returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (_sig.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            v := byte(0, mload(add(_sig, 96)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n        // solium-disable-next-line arg-overflow\n            return ecrecover(_hash, v, r, s);\n        }\n    }\n\n    /**\n    * toEthSignedMessageHash\n    * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n    * and hash the result\n    */\n    function toEthSignedMessageHash(bytes32 _hash)\n        internal\n        pure\n        returns (bytes32)\n    {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n        );\n    }\n}",
  "sourcePath": "/Users/anthony/code/DappStack/dpetition/dapp/contracts/src/ECRecovery.sol",
  "bytecode": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582031a85fdfb08f6fc25893815c6ac87a197bb25ba1ff82e6a2864af3e8e8d84abb0029",
  "sourceMap": "300:1855:1:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24",
  "deployedBytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582031a85fdfb08f6fc25893815c6ac87a197bb25ba1ff82e6a2864af3e8e8d84abb0029",
  "deployedSourceMap": "300:1855:1:-;;;;;;;;"
}